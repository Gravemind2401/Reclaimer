<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ include file="T4FileManager.ttinclude" #>
<#@ include file="Vectors.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>

<# //https://learn.microsoft.com/en-us/windows/win32/dxmath/ovw-xnamath-reference-functions-load #>

<#

    var fieldNames = VectorDescription.FieldNames;
    var propertyNames = VectorDescription.PropertyNames;

    var layoutDecN4 = new int[] { 10, 10, 10, 2 };
    var layoutDHenN3 = new int[] { 10, 11, 11 };
    var layoutHenDN3 = new int[] { 11, 11, 10 };

    var packedVectors = new List<VectorDescription>();

    packedVectors.Add(new VectorDescription("DHenN3", 3, true, layoutDHenN3));
    packedVectors.Add(new VectorDescription("HenDN3", 3, true, layoutHenDN3));
    packedVectors.Add(new VectorDescription("DecN4", 4, true, layoutDecN4));

    packedVectors.Add(new VectorDescription("UDHenN3", 3, false, layoutDHenN3));
    packedVectors.Add(new VectorDescription("UHenDN3", 3, false, layoutHenDN3));
    packedVectors.Add(new VectorDescription("UDecN4", 4, false, layoutDecN4));

    var fileManager = T4FileManager.Create(this).DisableTemplateMainOutputFile();

    foreach (var vector in packedVectors)
    {
        string JoinFields(string separator, string format = "{0}") => string.Join(separator, fieldNames.Take(vector.Dimensions).Select(s => string.Format(format, s)));
        string JoinProperties(string separator, string format = "{0}") => string.Join(separator, propertyNames.Take(vector.Dimensions).Select(s => string.Format(format, s)));

        fileManager.CreateNewFile(vector.TypeName + ".cs");
        var formattedLayout = string.Join(", ", vector.Precision.Take(vector.Dimensions)); #>
using Reclaimer.IO;
using System.Numerics;

<# WriteGeneratedCodeNote(); #>

namespace Reclaimer.Geometry.Vectors
{
    /// <summary>
    /// A <#= vector.Dimensions #>-dimensional vector packed into <#= vector.BitLength #> bits.
    /// <br/> Each axis has a precision of <#= formattedLayout #> bits respectively.
    /// <br/> Each axis has a possible value range from <#= vector.IsSigned ? -1 : 0 #>f to 1f.
    /// </summary>
    <# WriteGeneratedCodeAttribute(); #>
    public record struct <#= vector.TypeName #> : <#= vector.InterfaceTypes #>
    {
        private const int packSize = sizeof(<#= vector.StorageType #>);
        private const int structureSize = sizeof(<#= vector.StorageType #>);

        private static readonly PackedVectorHelper helper = PackedVectorHelper.Create<#= vector.IsSigned ? "SignExtended" : "Unsigned" #>(<#= formattedLayout #>);

        private <#= vector.StorageType #> bits;

        #region Axis Properties

<#      for (var index = 0; index < vector.Dimensions; index++)
        { #>
        public float <#= propertyNames[index] #>
        {
            readonly get => helper.Get<#= propertyNames[index] #>(in bits);
            set => helper.Set<#= propertyNames[index] #>(ref bits, value);
        }

<#      } #>
        #endregion

        public <#= vector.TypeName #>(<#= vector.StorageType #> value)
        {
            bits = value;
        }

        public <#= vector.TypeName #>(<#= vector.NumericsType #> value)
            : this(<#= JoinProperties(", ", "value.{0}") #>)
        { }

        public <#= vector.TypeName #>(<#= JoinFields(", ", "float {0}") #>)
        {
            bits = default;
            (<#= JoinProperties(", ") #>) = (<#= JoinFields(", ") #>);
        }

        public override readonly string ToString() => $"[<#= JoinProperties(", ", "{{{0}:F6}}") #>]";

        #region IBufferable

        static int IBufferable.PackSize => packSize;
        static int IBufferable.SizeOf => structureSize;
        static <#= vector.TypeName #> IBufferable<<#= vector.TypeName #>>.ReadFromBuffer(ReadOnlySpan<byte> buffer) => new <#= vector.TypeName #>(BitConverter.ToUInt32(buffer));
        readonly void IBufferable.WriteToBuffer(Span<byte> buffer) => BitConverter.GetBytes(bits).CopyTo(buffer);

        #endregion

        #region Cast Operators

        public static explicit operator <#= vector.NumericsType #>(<#= vector.TypeName #> value) => new <#= vector.NumericsType #>(<#= JoinProperties(", ", "value.{0}") #>);
        public static explicit operator <#= vector.TypeName #>(<#= vector.NumericsType #> value) => new <#= vector.TypeName #>(value);

        public static explicit operator <#= vector.StorageType #>(<#= vector.TypeName #> value) => value.bits;
        public static explicit operator <#= vector.TypeName #>(<#= vector.StorageType #> value) => new <#= vector.TypeName #>(value);

        #endregion
    }
}
<#
    }

    fileManager.Generate();

#>