<metro:MetroWindow
    x:Class="Reclaimer.Windows.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:local="clr-namespace:Reclaimer.Windows"
    xmlns:r="clr-namespace:Reclaimer"
    xmlns:s="clr-namespace:Studio.Controls;assembly=Studio"
    xmlns:u="clr-namespace:Studio.Utilities;assembly=Studio"
    xmlns:t="clr-namespace:Reclaimer.Resources.Terminology"
    mc:Ignorable="d" WindowState="Maximized" Icon="../Resources/Reclaimer.ico"
    Style="{StaticResource MainWindowStyle}"
    Loaded="MetroWindow_Loaded" Closing="MetroWindow_Closing"
    Title="{x:Static t:UI.Reclaimer}" Width="1600" Height="900">

    <metro:MetroWindow.IconTemplate>
        <DataTemplate>
            <ContentControl x:Name="content"
                            Foreground="{DynamicResource WindowIconBrushPrimaryActive}" 
                            Template="{StaticResource ic_Reclaimer}" />
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="False">
                    <Setter TargetName="content" Property="Foreground" Value="{DynamicResource WindowIconBrushPrimaryInactive}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </metro:MetroWindow.IconTemplate>

    <Window.Resources>
        <u:VisibilityConverter x:Key="visConverter" TrueValue="Visible" FalseValue="Collapsed" />

        <!--<Style TargetType="s:DocumentTabControl" BasedOn="{StaticResource {x:Type s:DocumentTabControl}}">
            <Setter Property="NewWindowType" Value="{x:Type local:TabWindow}" />
        </Style>

        <Style TargetType="s:UtilityTabControl" BasedOn="{StaticResource {x:Type s:UtilityTabControl}}">
            <Setter Property="NewWindowType" Value="{x:Type local:UtilityWindow}" />
        </Style>

        <Style TargetType="s:MultiPanel">
            <Setter Property="DefaultDockSize" Value="400" />
        </Style>-->
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Menu Grid.Row="0" x:Name="menu">
            <Menu.ItemsPanel>
                <ItemsPanelTemplate>
                    <DockPanel HorizontalAlignment="Stretch" LastChildFill="False" />
                </ItemsPanelTemplate>
            </Menu.ItemsPanel>
            <MenuItem x:Name="fileMenu" Header="{x:Static t:Menu.File}" Visibility="{Binding HasItems, RelativeSource={RelativeSource Self}, Converter={StaticResource visConverter}}" />
            <MenuItem Header="{x:Static t:Menu.Edit}" Visibility="{Binding HasItems, RelativeSource={RelativeSource Self}, Converter={StaticResource visConverter}}" />
            <MenuItem Header="{x:Static t:Menu.View}">
                <MenuItem Header="{x:Static t:Menu.Output}" Click="menuOutput_Click" />
                <MenuItem Header="{x:Static t:Menu.AppDirectory}" Click="menuAppDir_Click" />
                <MenuItem Header="{x:Static t:Menu.AppDataDirectory}" Click="menuAppDataDir_Click" />
                <MenuItem Header="{x:Static t:Menu.PluginsDirectory}" Click="menuPluginDir_Click" />
            </MenuItem>
            <MenuItem Header="{x:Static t:Menu.Tools}">
                <MenuItem Header="{x:Static t:Menu.Settings}" Click="menuSettings_Click" />
                <MenuItem DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"
                          Click="menuUpdates_Click">
                    <MenuItem.Style>
                        <Style TargetType="MenuItem">
                            <Setter Property="Header" Value="{x:Static t:Menu.CheckForUpdates}" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasUpdate}" Value="True">
                                    <Setter Property="Header" Value="{x:Static t:Menu.ViewUpdateDetails}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="{x:Static t:Menu.Themes}" Visibility="{Binding HasItems, RelativeSource={RelativeSource Self}, Converter={StaticResource visConverter}}" />
            <MenuItem Header="{x:Static t:Menu.Help}">
                <MenuItem Header="{x:Static t:Menu.SubmitAnIssue}" Click="menuIssue_Click" />
            </MenuItem>
            <MenuItem Header="{Binding Source={x:Static r:App.AppVersion}, FallbackValue='0.0.0.0'}" DockPanel.Dock="Right" IsEnabled="False" />
        </Menu>

        <s:DockContainer Grid.Row="1" 
                DataContext="{Binding Model, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"
                LeftItemsSource="{Binding LeftDockItems}"
                TopItemsSource="{Binding TopDockItems}"
                RightItemsSource="{Binding RightDockItems}"
                BottomItemsSource="{Binding BottomDockItems}"
                SelectedItem="{Binding SelectedDockItem}"
                SelectedContentTemplate="{StaticResource DockedToolTemplate}"
                DockCommand="{Binding DockCommand}">
            <Grid Background="{DynamicResource Environment.EnvironmentBackgroundGradient}">
                <ContentPresenter Content="{Binding Content}"
                        ContentTemplateSelector="{StaticResource coreTemplateSelector}" />
            </Grid>
        </s:DockContainer>

        <StatusBar Grid.Row="2" DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}">
            <StatusBarItem HorizontalAlignment="Left" Content="{Binding CurrentStatus}" />

            <StatusBar.Style>
                <Style TargetType="StatusBar" BasedOn="{StaticResource Studio.StatusBarStyle}">
                    <Setter Property="Background" Value="{DynamicResource Environment.StatusBar.DefaultBackground}" />
                    <Setter Property="Foreground" Value="{DynamicResource Environment.StatusBar.DefaultForeground}" />
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding HasUpdate}" Value="True" />
                                <Condition Binding="{Binding IsBusy}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource Environment.StatusBar.NoSolutionBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource Environment.StatusBar.NoSolutionForeground}" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsBusy}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Environment.StatusBar.DebuggingBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource Environment.StatusBar.DebuggingForeground}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StatusBar.Style>
        </StatusBar>
    </Grid>
</metro:MetroWindow>
